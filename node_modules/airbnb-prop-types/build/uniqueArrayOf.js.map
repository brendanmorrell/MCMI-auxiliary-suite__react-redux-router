{"version":3,"sources":["../src/uniqueArrayOf.js"],"names":["uniqueArrayOfTypeValidator","unique","type","TypeError","mapper","name","uniqueArrayOfMapped","props","propName","propValue","values","map","args","isRequired","arrayValidator","uniqueValidator","validator"],"mappings":";;;qBAMwBA,0B;;;;;;AANxB;;AACA;;;;AACA;;;;;;;;AAEA,IAAMC,SAAS,+BAAf;;AAEe,SAASD,0BAAT,CAAoCE,IAApC,EAAmD;AAChE,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,MAAIC,SAAS,IAAb;AACA,MAAIC,OAAO,mBAAX;;AAEA,MAAI,uDAAgB,CAApB,EAAuB;AACrB,QAAI,8DAAmB,UAAvB,EAAmC;AACjCD;AACD,KAFD,MAEO,IAAI,8DAAmB,QAAvB,EAAiC;AACtCC;AACD,KAFM,MAEA;AACL,YAAM,IAAIF,SAAJ,CAAc,gDAAd,CAAN;AACD;AACF,GARD,MAQO,IAAI,uDAAgB,CAApB,EAAuB;AAC5B,QAAI,8DAAmB,UAAnB,IAAiC,8DAAmB,QAAxD,EAAkE;AAChEC;AACAC;AACD,KAHD,MAGO;AACL,YAAM,IAAIF,SAAJ,CAAc,qDAAd,CAAN;AACD;AACF,GAPM,MAOA,IAAI,qDAAc,CAAlB,EAAqB;AAC1B,UAAM,IAAIA,SAAJ,CAAc,gEAAd,CAAN;AACD;;AAED,WAASG,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAAuD;AACrD,QAAMC,YAAYF,MAAMC,QAAN,CAAlB;AACA,QAAIC,aAAa,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;;AAED,QAAMC,SAASD,UAAUE,GAAV,CAAcP,MAAd,CAAf;;AANqD,sCAANQ,IAAM;AAANA,UAAM;AAAA;;AAOrD,WAAOX,sDAAYM,KAAZ,sBAAoBC,QAApB,EAA+BE,MAA/B,IAAyCF,QAAzC,SAAsDI,IAAtD,EAAP;AACD;;AAEDN,sBAAoBO,UAApB;AAAiC,aAASA,UAAT,CAAoBN,KAApB,EAA2BC,QAA3B,EAA8C;AAC7E,UAAMC,YAAYF,MAAMC,QAAN,CAAlB;;AAD6E,yCAANI,IAAM;AAANA,YAAM;AAAA;;AAE7E,UAAIH,aAAa,IAAjB,EAAuB;AACrB,eAAO,iBAAMI,UAAN,0BAAiBN,KAAjB,EAAwBC,QAAxB,SAAqCI,IAArC,EAAP;AACD;AACD,aAAON,sCAAoBC,KAApB,EAA2BC,QAA3B,SAAwCI,IAAxC,EAAP;AACD;;AAND,WAA0CC,UAA1C;AAAA;;AAQA,MAAMC,iBAAiB,wBAAQZ,IAAR,CAAvB;;AAEA,MAAMa,kBAAkBX,SAASE,mBAAT,GAA+BL,MAAvD;;AAEA,MAAMe,YAAY,sBAAI,CAACF,cAAD,EAAiBC,eAAjB,CAAJ,EAAuCV,IAAvC,CAAlB;AACAW,YAAUH,UAAV,GAAuB,sBAAI,CACzBE,gBAAgBF,UADS,EAEzBC,eAAeD,UAFU,CAAJ,SAGjBR,IAHiB,kBAAvB;;AAKA,SAAOW,SAAP;AACD","file":"uniqueArrayOf.js","sourcesContent":["import { arrayOf, array } from 'prop-types';\nimport and from './and';\nimport uniqueArray from './uniqueArray';\n\nconst unique = uniqueArray();\n\nexport default function uniqueArrayOfTypeValidator(type, ...rest) {\n  if (typeof type !== 'function') {\n    throw new TypeError('type must be a validator function');\n  }\n\n  let mapper = null;\n  let name = 'uniqueArrayOfType';\n\n  if (rest.length === 1) {\n    if (typeof rest[0] === 'function') {\n      mapper = rest[0];\n    } else if (typeof rest[0] === 'string') {\n      name = rest[0];\n    } else {\n      throw new TypeError('single input must either be string or function');\n    }\n  } else if (rest.length === 2) {\n    if (typeof rest[0] === 'function' && typeof rest[1] === 'string') {\n      mapper = rest[0];\n      name = rest[1];\n    } else {\n      throw new TypeError('multiple inputs must be in [function, string] order');\n    }\n  } else if (rest.length > 2) {\n    throw new TypeError('only [], [name], [mapper], and [mapper, name] are valid inputs');\n  }\n\n  function uniqueArrayOfMapped(props, propName, ...args) {\n    const propValue = props[propName];\n    if (propValue == null) {\n      return null;\n    }\n\n    const values = propValue.map(mapper);\n    return unique({ ...props, [propName]: values }, propName, ...args);\n  }\n\n  uniqueArrayOfMapped.isRequired = function isRequired(props, propName, ...args) {\n    const propValue = props[propName];\n    if (propValue == null) {\n      return array.isRequired(props, propName, ...args);\n    }\n    return uniqueArrayOfMapped(props, propName, ...args);\n  };\n\n  const arrayValidator = arrayOf(type);\n\n  const uniqueValidator = mapper ? uniqueArrayOfMapped : unique;\n\n  const validator = and([arrayValidator, uniqueValidator], name);\n  validator.isRequired = and([\n    uniqueValidator.isRequired,\n    arrayValidator.isRequired,\n  ], `${name}.isRequired`);\n\n  return validator;\n}\n"]}