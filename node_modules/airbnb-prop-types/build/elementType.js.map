{"version":3,"sources":["../src/elementType.js"],"names":["elementTypeValidator","getTypeName","Type","type","validateElementType","props","propName","componentName","TypeError","elementType","rest","isRequired","typeName","validatorName"],"mappings":";;;;;;qBAyBwBA,oB;;AAzBxB;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOA,IAAP;AACD;AACD,MAAMC,OAAO,mCAAiBD,IAAjB,CAAb;;AAEA,4BANyB,CAME;AAC3B,SAAOC,QAAQ,qBAAf;AACD;;AAED,SAASC,mBAAT,CAA6BF,IAA7B,EAAmCG,KAAnC,EAA0CC,QAA1C,EAAoDC,aAApD,EAAmE;AAAA,MACzDJ,IADyD,GAChDE,MAAMC,QAAN,CADgD,CACzDH,IADyD;;;AAGjE,MAAIA,SAASD,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,SAAO,IAAIM,SAAJ,QAAiBD,aAAjB,iBAAkCD,QAAlC,iDAA8EL,YAAYC,IAAZ,CAA9E,EAAP;AACD;;AAEc,SAASF,oBAAT,CAA8BE,IAA9B,EAAoC;AACjD,MAAIA,SAAS,GAAb,EAAkB;AAChB,WAAO,oDAAuB,gBAAvB,EAAyCA,IAAzC,CAAP;AACD;;AAED,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAAhD,EAA4D;AAC1D,UAAM,IAAIM,SAAJ,uFAAiGN,IAAjG,yCAAiGA,IAAjG,GAAN;AACD;;AAED,WAASO,WAAT,CAAqBJ,KAArB,EAA4BC,QAA5B,EAAsCC,aAAtC,EAA8D;AAC5D,QAAIF,MAAMC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAH2D,sCAANI,IAAM;AAANA,UAAM;AAAA;;AAI5D,WAAON,sCAAoBF,IAApB,EAA0BG,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,SAA6DG,IAA7D,EAAP;AACD;AACDD,cAAYE,UAAZ,GAAyBF,WAAzB,CAfiD,CAeX;;AAEtC,MAAMG,WAAWX,YAAYC,IAAZ,CAAjB;AACA,MAAMW,wCAA+BD,QAA/B,OAAN;AACA,SAAO,gCAAc,sBAAI,qBAAUH,WAAV,CAAJ,EAA4BI,aAA5B,CAAd,EAA0DA,aAA1D,EAAyEX,IAAzE,CAAP;AACD","file":"elementType.js","sourcesContent":["import { element } from 'prop-types';\nimport and from './and';\nimport getComponentName from './helpers/getComponentName';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction getTypeName(Type) {\n  if (typeof Type === 'string') {\n    return Type;\n  }\n  const type = getComponentName(Type);\n\n  /* istanbul ignore next */ // in environments where functions do not have names\n  return type || 'Anonymous Component';\n}\n\nfunction validateElementType(Type, props, propName, componentName) {\n  const { type } = props[propName];\n\n  if (type === Type) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}.${propName} must be a React element of type ${getTypeName(Type)}`);\n}\n\nexport default function elementTypeValidator(Type) {\n  if (Type === '*') {\n    return wrapValidator(element, 'elementType(*)', Type);\n  }\n\n  if (typeof Type !== 'string' && typeof Type !== 'function') {\n    throw new TypeError(`Type must be a React Component, an HTML element tag name, or \"*\". Got an ${typeof Type}`);\n  }\n\n  function elementType(props, propName, componentName, ...rest) {\n    if (props[propName] == null) {\n      return null;\n    }\n    return validateElementType(Type, props, propName, componentName, ...rest);\n  }\n  elementType.isRequired = elementType; // covered by and + element\n\n  const typeName = getTypeName(Type);\n  const validatorName = `elementType(${typeName})`;\n  return wrapValidator(and([element, elementType], validatorName), validatorName, Type);\n}\n"]}