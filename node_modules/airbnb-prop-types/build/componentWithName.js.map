{"version":3,"sources":["../src/componentWithName.js"],"names":["componentWithName","hasName","name","prop","propName","componentName","rest","Array","isArray","map","item","Boolean","isValidElement","TypeError","type","componentNameFromType","test","componentWithNameValidator","props","isRequired","componentWithNameRequired"],"mappings":";;;qBAuCwBA,iB;;AAvCxB;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuCC,aAAvC,EAA+D;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AAC7D,MAAIC,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvB,WAAO,iCACLA,KAAKM,GAAL,CAAS;AAAA,aAAQR,0BAAQC,IAAR,EAAcQ,IAAd,EAAoBN,QAApB,EAA8BC,aAA9B,SAAgDC,IAAhD,EAAR;AAAA,KAAT,CADK,EAELK,OAFK,KAGF,IAHL;AAID;;AAED,MAAI,CAAC,mBAAMC,cAAN,CAAqBT,IAArB,CAAL,EAAiC;AAC/B,WAAO,IAAIU,SAAJ,QACFR,aADE,iBACeD,QADf,oCAAP;AAGD;;AAZ4D,MAcrDU,IAdqD,GAc5CX,IAd4C,CAcrDW,IAdqD;;AAe7D,MAAMC,wBAAwB,mCAAiBD,IAAjB,CAA9B;;AAEA,MAAI,0BAAQZ,IAAR,KAAiB,CAACA,KAAKc,IAAL,CAAUD,qBAAV,CAAtB,EAAwD;AACtD,WAAO,IAAIF,SAAJ,cACAR,aADA,iBACiBD,QADjB,0EACuFF,IADvF,EAAP;AAGD;;AAED,MAAI,CAAC,0BAAQA,IAAR,CAAD,IAAkBa,0BAA0Bb,IAAhD,EAAsD;AACpD,WAAO,IAAIW,SAAJ,cACAR,aADA,iBACiBD,QADjB,gDAC6DF,IAD7D,EAAP;AAGD;;AAED,SAAO,IAAP;AACD;;AAEc,SAASF,iBAAT,CAA2BE,IAA3B,EAAiC;AAC9C,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,CAAC,0BAAQA,IAAR,CAAjC,EAAgD;AAC9C,UAAM,IAAIW,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,WAASI,0BAAT,CAAoCC,KAApC,EAA2Cd,QAA3C,EAAqDC,aAArD,EAA6E;AAC3E,QAAMF,OAAOe,MAAMd,QAAN,CAAb;AACA,QAAIc,MAAMd,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAJ0E,uCAANE,IAAM;AAANA,UAAM;AAAA;;AAK3E,WAAOL,0BAAQC,IAAR,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,aAA9B,SAAgDC,IAAhD,EAAP;AACD;;AAEDW,6BAA2BE,UAA3B;AAAwC,aAASC,yBAAT,CACtCF,KADsC,EAEtCd,QAFsC,EAGtCC,aAHsC,EAKtC;AACA,UAAMF,OAAOe,MAAMd,QAAN,CAAb;AACA,UAAID,QAAQ,IAAZ,EAAkB;AAChB,eAAO,IAAIU,SAAJ,cAAmBR,aAAnB,iBAAoCD,QAApC,wDAAwFF,IAAxF,EAAP;AACD;;AAJD,yCADGI,IACH;AADGA,YACH;AAAA;;AAKA,aAAOL,0BAAQC,IAAR,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,aAA9B,SAAgDC,IAAhD,EAAP;AACD;;AAXD,WAAiDc,yBAAjD;AAAA;;AAaA,SAAO,gCAAcH,0BAAd,gCAA+Df,IAA/D,GAAuEA,IAAvE,CAAP;AACD","file":"componentWithName.js","sourcesContent":["import React from 'react';\nimport isRegex from 'is-regex';\nimport find from 'array.prototype.find';\n\nimport getComponentName from './helpers/getComponentName';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction hasName(name, prop, propName, componentName, ...rest) {\n  if (Array.isArray(prop)) {\n    return find(\n      prop.map(item => hasName(name, item, propName, componentName, ...rest)),\n      Boolean,\n    ) || null;\n  }\n\n  if (!React.isValidElement(prop)) {\n    return new TypeError(\n      `${componentName}.${propName} is not a valid React element`,\n    );\n  }\n\n  const { type } = prop;\n  const componentNameFromType = getComponentName(type);\n\n  if (isRegex(name) && !name.test(componentNameFromType)) {\n    return new TypeError(\n      `\\`${componentName}.${propName}\\` only accepts components matching the regular expression ${name}`,\n    );\n  }\n\n  if (!isRegex(name) && componentNameFromType !== name) {\n    return new TypeError(\n      `\\`${componentName}.${propName}\\` only accepts components named ${name}`,\n    );\n  }\n\n  return null;\n}\n\nexport default function componentWithName(name) {\n  if (typeof name !== 'string' && !isRegex(name)) {\n    throw new TypeError('name must be a string or a regex');\n  }\n\n  function componentWithNameValidator(props, propName, componentName, ...rest) {\n    const prop = props[propName];\n    if (props[propName] == null) {\n      return null;\n    }\n    return hasName(name, prop, propName, componentName, ...rest);\n  }\n\n  componentWithNameValidator.isRequired = function componentWithNameRequired(\n    props,\n    propName,\n    componentName,\n    ...rest\n  ) {\n    const prop = props[propName];\n    if (prop == null) {\n      return new TypeError(`\\`${componentName}.${propName}\\` requires at least one component named ${name}`);\n    }\n    return hasName(name, prop, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(componentWithNameValidator, `componentWithName:${name}`, name);\n}\n"]}