{"version":3,"sources":["../src/numericString.js"],"names":["validNumericChars","validator","numericString","props","propName","componentName","rest","stringError","value","passesRegex","test","TypeError","isRequired","numericStringRequired"],"mappings":";;;;AAAA;;AACA;;;;;;AAEA,IAAMA,oBAAoB,iDAA1B;;AAEA,IAAMC;AAAY,WAASC,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,aAAxC,EAAgE;AAChF,QAAIF,MAAMC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAH+E,sCAANE,IAAM;AAANA,UAAM;AAAA;;AAKhF,QAAMC,cAAc,oCAAOJ,KAAP,EAAcC,QAAd,EAAwBC,aAAxB,SAA0CC,IAA1C,EAApB;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAOA,WAAP;AACD;;AAED,QAAMC,QAAQL,MAAMC,QAAN,CAAd;;AAEA,QAAMK,cAAcT,kBAAkBU,IAAlB,CAAuBF,KAAvB,CAApB;AACA,QAAIC,WAAJ,EAAiB;AACf,aAAO,IAAP;AACD;;AAED,WAAO,IAAIE,SAAJ,QAAiBN,aAAjB,wBAAyCD,QAAzC,0BAA8DI,KAA9D,iSAAP;AAOD;;AAxBK,SAAqBN,aAArB;AAAA,GAAN;;AA0BAD,UAAUW,UAAV;AAAuB,WAASC,qBAAT,CAA+BV,KAA/B,EAAsCC,QAAtC,EAAgDC,aAAhD,EAAwE;AAC7F,QAAIF,MAAMC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,aAAO,IAAIO,SAAJ,QAAiBN,aAAjB,kBAAmCD,QAAnC,mBAAP;AACD;;AAH4F,uCAANE,IAAM;AAANA,UAAM;AAAA;;AAI7F,WAAOL,4BAAUE,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,SAA6CC,IAA7C,EAAP;AACD;;AALD,SAAgCO,qBAAhC;AAAA;;qBAOe;AAAA,SAAM,gCAAcZ,SAAd,EAAyB,eAAzB,CAAN;AAAA,C","file":"numericString.js","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\\.[0-9]+)?|0|0\\.[0-9]+)$/;\n\nconst validator = function numericString(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return null;\n  }\n\n  const stringError = string(props, propName, componentName, ...rest);\n  if (stringError) {\n    return stringError;\n  }\n\n  const value = props[propName];\n\n  const passesRegex = validNumericChars.test(value);\n  if (passesRegex) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}: prop \"${propName}\" (value \"${value}\") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  `);\n};\n\nvalidator.isRequired = function numericStringRequired(props, propName, componentName, ...rest) {\n  if (props[propName] == null) {\n    return new TypeError(`${componentName}: ${propName} is required`);\n  }\n  return validator(props, propName, componentName, ...rest);\n};\n\nexport default () => wrapValidator(validator, 'numericString');\n"]}