{"version":3,"sources":["../src/childrenHavePropXorChildren.js"],"names":["childrenHavePropXorChildren","prop","TypeError","validator","childrenHavePropXorChildrenWithProp","_","componentName","children","truthyChildrenCount","propCount","grandchildrenCount","Children","forEach","child","props","count","isRequired"],"mappings":";;;;;;qBAGwBA,2B;;AAHxB;;;;AACA;;;;;;AAEe,SAASA,2BAAT,CAAqCC,IAArC,EAA2C;AACxD,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAAhD,EAA0D;AACxD,UAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;AACD;;AAED,MAAMC;AAAY,aAASC,mCAAT,OAA2DC,CAA3D,EAA8DC,aAA9D,EAA6E;AAAA,UAA9BC,QAA8B,QAA9BA,QAA8B;;AAC7F,UAAIC,sBAAsB,CAA1B;AACA,UAAIC,YAAY,CAAhB;AACA,UAAIC,qBAAqB,CAAzB;;AAEA,yBAAMC,QAAN,CAAeC,OAAf,CAAuBL,QAAvB,EAAiC,UAACM,KAAD,EAAW;AAC1C,YAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAEDL,+BAAuB,CAAvB;;AAEA,YAAIK,MAAMC,KAAN,CAAYb,IAAZ,CAAJ,EAAuB;AACrBQ,uBAAa,CAAb;AACD;;AAED,YAAI,mBAAME,QAAN,CAAeI,KAAf,CAAqBF,MAAMC,KAAN,CAAYP,QAAjC,CAAJ,EAAgD;AAC9CG,gCAAsB,CAAtB;AACD;AACF,OAdD;;AAgBA,UACGD,cAAcD,mBAAd,IAAqCE,uBAAuB,CAA7D,IACCD,cAAc,CAAd,IAAmBC,uBAAuBF,mBAD3C,IAECC,cAAc,CAAd,IAAmBC,uBAAuB,CAH7C,EAIE;AACA,eAAO,IAAP;AACD;;AAED,aAAO,IAAIR,SAAJ,cAAmBI,aAAnB,2DAA0EL,IAA1E,sDAAP;AACD;;AA9BK,WAAqBG,mCAArB;AAAA,KAAN;AA+BAD,YAAUa,UAAV,GAAuBb,SAAvB;;AAEA,SAAO,gCAAcA,SAAd,kDAAgEF,IAAhE,GAAwEA,IAAxE,CAAP;AACD","file":"childrenHavePropXorChildren.js","sourcesContent":["import React from 'react';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function childrenHavePropXorChildren(prop) {\n  if (typeof prop !== 'string' && typeof prop !== 'symbol') {\n    throw new TypeError('invalid prop: must be string or symbol');\n  }\n\n  const validator = function childrenHavePropXorChildrenWithProp({ children }, _, componentName) {\n    let truthyChildrenCount = 0;\n    let propCount = 0;\n    let grandchildrenCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (!child) {\n        return;\n      }\n\n      truthyChildrenCount += 1;\n\n      if (child.props[prop]) {\n        propCount += 1;\n      }\n\n      if (React.Children.count(child.props.children)) {\n        grandchildrenCount += 1;\n      }\n    });\n\n    if (\n      (propCount === truthyChildrenCount && grandchildrenCount === 0) ||\n      (propCount === 0 && grandchildrenCount === truthyChildrenCount) ||\n      (propCount === 0 && grandchildrenCount === 0)\n    ) {\n      return null;\n    }\n\n    return new TypeError(`\\`${componentName}\\` requires children to all have prop “${prop}”, all have children, or all have neither.`);\n  };\n  validator.isRequired = validator;\n\n  return wrapValidator(validator, `childrenHavePropXorChildrenWithProp:${prop}`, prop);\n}\n"]}