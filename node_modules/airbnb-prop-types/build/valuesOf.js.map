{"version":3,"sources":["../src/valuesOf.js"],"names":["valuesOfValidator","propType","TypeError","validator","valuesOf","props","propName","componentName","location","propFullName","rest","propValue","firstError","Object","keys","some","key","isRequired","valuesOfRequired"],"mappings":";;;qBAKwBA,iB;;AALxB;;;;AACA;;;;;;AAEA;;AAEe,SAASA,iBAAT,CAA2BC,QAA3B,EAAqC;AAClD,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAIC,SAAJ,CAAc,uCAAd,CAAN;AACD;;AAED,MAAMC;AAAY,aAASC,QAAT,CAChBC,KADgB,EAEhBC,QAFgB,EAGhBC,aAHgB,EAIhBC,QAJgB,EAKhBC,YALgB,EAOhB;AAAA,wCADGC,IACH;AADGA,YACH;AAAA;;AACA,UAAMC,YAAYN,MAAMC,QAAN,CAAlB;AACA,UAAIK,aAAa,IAAb,IAAqB,8BAAYA,SAAZ,CAAzB,EAAiD;AAC/C,eAAO,IAAP;AACD;;AAED,UAAIC,mBAAJ;AACAC,aAAOC,IAAP,CAAYH,SAAZ,EAAuBI,IAAvB,CAA4B,UAACC,GAAD,EAAS;AACnCJ,qBAAaX,2BACXU,SADW,EAEXK,GAFW,EAGXT,aAHW,EAIXC,QAJW,SAKRC,YALQ,iBAKQO,GALR,UAMRN,IANQ,EAAb;AAQA,eAAOE,UAAP;AACD,OAVD;AAWA,aAAOA,cAAc,IAArB;AACD;;AA1BK,WAAqBR,QAArB;AAAA,KAAN;AA2BAD,YAAUc,UAAV;AAAuB,aAASC,gBAAT,CAA0Bb,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,EAAmE;AACxF,UAAMI,YAAYN,MAAMC,QAAN,CAAlB;AACA,UAAIK,aAAa,IAAjB,EAAuB;AACrB,eAAO,IAAIT,SAAJ,QAAiBK,aAAjB,kBAAmCD,QAAnC,oBAAP;AACD;;AAJuF,yCAANI,IAAM;AAANA,YAAM;AAAA;;AAKxF,aAAOP,4BAAUE,KAAV,EAAiBC,QAAjB,EAA2BC,aAA3B,SAA6CG,IAA7C,EAAP;AACD;;AAND,WAAgCQ,gBAAhC;AAAA;;AAQA,SAAO,gCAAcf,SAAd,EAAyB,UAAzB,EAAqCF,QAArC,CAAP;AACD","file":"valuesOf.js","sourcesContent":["import isPrimitive from './helpers/isPrimitive';\nimport wrapValidator from './helpers/wrapValidator';\n\n// code adapted from https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L307-L340\n\nexport default function valuesOfValidator(propType) {\n  if (typeof propType !== 'function') {\n    throw new TypeError('objectOf: propType must be a function');\n  }\n\n  const validator = function valuesOf(\n    props,\n    propName,\n    componentName,\n    location,\n    propFullName,\n    ...rest\n  ) {\n    const propValue = props[propName];\n    if (propValue == null || isPrimitive(propValue)) {\n      return null;\n    }\n\n    let firstError;\n    Object.keys(propValue).some((key) => {\n      firstError = propType(\n        propValue,\n        key,\n        componentName,\n        location,\n        `${propFullName}.${key}`,\n        ...rest,\n      );\n      return firstError;\n    });\n    return firstError || null;\n  };\n  validator.isRequired = function valuesOfRequired(props, propName, componentName, ...rest) {\n    const propValue = props[propName];\n    if (propValue == null) {\n      return new TypeError(`${componentName}: ${propName} is required.`);\n    }\n    return validator(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(validator, 'valuesOf', propType);\n}\n"]}