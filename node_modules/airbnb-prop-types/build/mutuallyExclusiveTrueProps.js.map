{"version":3,"sources":["../src/mutuallyExclusiveTrueProps.js"],"names":["mutuallyExclusiveTrue","exclusiveProps","length","TypeError","every","x","propsList","join","validator","mutuallyExclusiveTrueProps","props","propName","componentName","countProps","count","prop","exclusivePropCount","reduce","Error","rest","isRequired","mutuallyExclusiveTruePropsRequired"],"mappings":";;;qBAGwBA,qB;;AAHxB;;AACA;;;;;;AAEe,SAASA,qBAAT,GAAkD;AAAA,oCAAhBC,cAAgB;AAAhBA,kBAAgB;AAAA;;AAC/D,MAAIA,eAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,UAAM,IAAIC,SAAJ,CAAc,0DAAd,CAAN;AACD;AACD,MAAI,CAACF,eAAeG,KAAf,CAAqB;AAAA,WAAK,OAAOC,CAAP,KAAa,QAAlB;AAAA,GAArB,CAAL,EAAuD;AACrD,UAAM,IAAIF,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAED,MAAMG,YAAYL,eAAeM,IAAf,CAAoB,OAApB,CAAlB;;AAEA,MAAMC;AAAY,aAASC,0BAAT,CAAoCC,KAApC,EAA2CC,QAA3C,EAAqDC,aAArD,EAA6E;AAC7F,UAAMC;AAAa,iBAAbA,UAAa,CAACC,KAAD,EAAQC,IAAR;AAAA,iBAAkBD,SAASJ,MAAMK,IAAN,IAAc,CAAd,GAAkB,CAA3B,CAAlB;AAAA;;AAAb;AAAA,SAAN;;AAEA,UAAMC,qBAAqBf,eAAegB,MAAf,CAAsBJ,UAAtB,EAAkC,CAAlC,CAA3B;AACA,UAAIG,qBAAqB,CAAzB,EAA4B;AAC1B,eAAO,IAAIE,KAAJ,eAAeN,aAAf,2EAA0FN,SAA1F,EAAP;AACD;;AAN4F,yCAANa,IAAM;AAANA,YAAM;AAAA;;AAO7F,aAAO,kCAAKT,KAAL,EAAYC,QAAZ,EAAsBC,aAAtB,SAAwCO,IAAxC,EAAP;AACD;;AARK,WAAqBV,0BAArB;AAAA,KAAN;;AAUAD,YAAUY,UAAV;AAAuB,aAASC,kCAAT,CACrBX,KADqB,EAErBC,QAFqB,EAGrBC,aAHqB,EAKrB;AACA,UAAMC;AAAa,iBAAbA,UAAa,CAACC,KAAD,EAAQC,IAAR;AAAA,iBAAkBD,SAASJ,MAAMK,IAAN,IAAc,CAAd,GAAkB,CAA3B,CAAlB;AAAA;;AAAb;AAAA,SAAN;;AAEA,UAAMC,qBAAqBf,eAAegB,MAAf,CAAsBJ,UAAtB,EAAkC,CAAlC,CAA3B;AACA,UAAIG,qBAAqB,CAAzB,EAA4B;AAC1B,eAAO,IAAIE,KAAJ,eAAeN,aAAf,2EAA0FN,SAA1F,EAAP;AACD;;AAND,yCADGa,IACH;AADGA,YACH;AAAA;;AAOA,aAAO,gBAAKC,UAAL,yBAAgBV,KAAhB,EAAuBC,QAAvB,EAAiCC,aAAjC,SAAmDO,IAAnD,EAAP;AACD;;AAbD,WAAgCE,kCAAhC;AAAA;;AAeA,SAAO,gCAAcb,SAAd,0CAAwDF,SAAxD,GAAqEL,cAArE,CAAP;AACD","file":"mutuallyExclusiveTrueProps.js","sourcesContent":["import { bool } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function mutuallyExclusiveTrue(...exclusiveProps) {\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive is required');\n  }\n  if (!exclusiveProps.every(x => typeof x === 'string')) {\n    throw new TypeError('all exclusive true props must be strings');\n  }\n\n  const propsList = exclusiveProps.join(', or ');\n\n  const validator = function mutuallyExclusiveTrueProps(props, propName, componentName, ...rest) {\n    const countProps = (count, prop) => (count + (props[prop] ? 1 : 0));\n\n    const exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these boolean props be true: ${propsList}`);\n    }\n    return bool(props, propName, componentName, ...rest);\n  };\n\n  validator.isRequired = function mutuallyExclusiveTruePropsRequired(\n    props,\n    propName,\n    componentName,\n    ...rest\n  ) {\n    const countProps = (count, prop) => (count + (props[prop] ? 1 : 0));\n\n    const exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these boolean props be true: ${propsList}`);\n    }\n    return bool.isRequired(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(validator, `mutuallyExclusiveTrueProps: ${propsList}`, exclusiveProps);\n}\n"]}